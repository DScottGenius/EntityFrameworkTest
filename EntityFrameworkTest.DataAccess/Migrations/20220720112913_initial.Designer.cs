// <auto-generated />
using System;
using EntityFrameworkTest.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityFrameworkTest.DataAccess.Migrations
{
    [DbContext(typeof(DSDbContextcs))]
    [Migration("20220720112913_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityFrameworkTest.Data.Model.Address", b =>
                {
                    b.Property<string>("Line1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Line2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Line1", "City", "Postcode");

                    b.HasIndex("Owner");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("EntityFrameworkTest.Data.Model.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdeptReference")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AdeptReference");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EntityFrameworkTest.Data.Model.User", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdeptReference")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountNumber");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityFrameworkTest.Model.Model.Email", b =>
                {
                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("owner")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EmailAddress");

                    b.HasIndex("owner");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("EntityFrameworkTest.Model.Model.Phone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("owner")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PhoneNumber");

                    b.HasIndex("owner");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("EntityFrameworkTest.Data.Model.Address", b =>
                {
                    b.HasOne("EntityFrameworkTest.Data.Model.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("Owner")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFrameworkTest.Data.Model.Payment", b =>
                {
                    b.HasOne("EntityFrameworkTest.Data.Model.User", "AssociatedUser")
                        .WithMany("PaymentsMade")
                        .HasForeignKey("AdeptReference")
                        .HasPrincipalKey("AdeptReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedUser");
                });

            modelBuilder.Entity("EntityFrameworkTest.Model.Model.Email", b =>
                {
                    b.HasOne("EntityFrameworkTest.Data.Model.User", null)
                        .WithMany("Emails")
                        .HasForeignKey("owner")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFrameworkTest.Model.Model.Phone", b =>
                {
                    b.HasOne("EntityFrameworkTest.Data.Model.User", null)
                        .WithMany("Phones")
                        .HasForeignKey("owner")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EntityFrameworkTest.Data.Model.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Emails");

                    b.Navigation("PaymentsMade");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
